"""
Visualize the advanced synthetic dataset generated by simulation/advanced_simulator.py

Outputs:
- adv_distributions.png: histograms of key feature groups
- adv_correlation.png: correlation heatmap across selected variables
- adv_drivers_vs_risk.png: partial-like driver plots vs risk_prob_7d and risk_severity
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import argparse

DEFAULT_DATA_PATH = '../data/advanced_rockfall_dataset.csv'


def load_df(path: str) -> pd.DataFrame:
    return pd.read_csv(path)


def plot_distributions(df: pd.DataFrame):
    fig, axes = plt.subplots(3, 4, figsize=(18, 12))
    axes = axes.ravel()
    cols = [
        'slope_angle', 'slope_roughness', 'seeder_height', 'local_relief',
        'curvature', 'roughness_m', 'roughness_l', 'rain_7d_mm',
        'api_7d', 'temp_mean_7d_c', 'freeze_thaw_7d', 'vibration_events_7d',
    ]
    for i, c in enumerate(cols):
        if c in df.columns:
            axes[i].hist(df[c], bins=40, color='#4c78a8', alpha=0.8)
            axes[i].set_title(c)
    plt.tight_layout()
    plt.savefig('adv_distributions.png', dpi=200, bbox_inches='tight')
    plt.close()


def plot_correlation(df: pd.DataFrame):
    cols = [
        'slope_angle', 'slope_roughness', 'seeder_height', 'local_relief',
        'roughness_m', 'roughness_l', 'rain_7d_mm', 'api_7d', 'temp_mean_7d_c',
        'vibration_events_7d', 'kinetic_energy', 'impact_position', 'runout_distance',
        'risk_prob_7d', 'risk_severity'
    ]
    cols = [c for c in cols if c in df.columns]
    corr = df[cols].corr()
    plt.figure(figsize=(12, 10))
    sns.heatmap(corr, annot=False, cmap='coolwarm', center=0, square=False)
    plt.title('Correlation heatmap')
    plt.tight_layout()
    plt.savefig('adv_correlation.png', dpi=200, bbox_inches='tight')
    plt.close()


def plot_drivers_vs_risk(df: pd.DataFrame):
    fig, axes = plt.subplots(2, 4, figsize=(18, 8))
    axes = axes.ravel()
    drivers = [
        'api_7d', 'api_30d', 'slope_angle', 'slope_roughness',
        'disp_rate_mm_day', 'disp_accel_mm_day2', 'pore_pressure_kpa', 'vibration_events_7d'
    ]
    ycols = ['risk_prob_7d', 'risk_severity']
    for i, drv in enumerate(drivers):
        if drv in df.columns:
            ax = axes[i]
            for y in ycols:
                if y in df.columns:
                    sns.regplot(x=drv, y=y, data=df.sample(min(10000, len(df)), random_state=42),
                                scatter_kws={'s': 8, 'alpha': 0.3}, line_kws={'color': 'red'}, ax=ax)
            ax.set_title(drv)
    plt.tight_layout()
    plt.savefig('adv_drivers_vs_risk.png', dpi=200, bbox_inches='tight')
    plt.close()


def parse_args():
    p = argparse.ArgumentParser(description='Visualize advanced simulation dataset')
    p.add_argument('--data', type=str, default=DEFAULT_DATA_PATH)
    return p.parse_args()


def main():
    args = parse_args()
    df = load_df(args.data)
    plot_distributions(df)
    plot_correlation(df)
    plot_drivers_vs_risk(df)
    print('Saved adv_distributions.png, adv_correlation.png, adv_drivers_vs_risk.png')


if __name__ == '__main__':
    main()


